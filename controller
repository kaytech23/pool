process_next_move()
    - state player
        - get current player
        - if foul
            x, y = player.reset_cue()
        - angle, force = player.get_stroke()
    - state simulation

def reset_cue_ball(player, x, y):
    players.cue_ball_update(player, x, y)
    simulator.reset_cue_ball(x, y)

def stroke(player, angle, force):
    simulator.set_stroke(angle, force)
    change_state(stroke_simulation)

def change_state(state)


* Events --- simulator
simulation finished()
    - check game state
        -> state(win/foul/continue/change)
        -> current player
    - update players(player_played, balls_state, balls_pocketed, state)
    - change_state(player_move)
    - thread process next_move

pocketed_ball()
    - color assignment - update players and controller
    - add pocketed balls to list
    - check if foul (white)
    - check if win (black)
cue_ball_hit()
    - wrong color foul


current_player.update(dt)
current_player.key_stroke(key)
current_player.mouse_event(mouse_event)

change_state(start)

SETUP
controller
simulator
players


player = getcurrentplayer()
change_state(player_move)
thread new process_next_move()


* update(dt)
    - if pause
    - if simulation
        * real_time
            simulator.update(dt)
        * full
    - if player
        draw player ??
    draw simulation
    draw game state


game_state.update(



player_id = game_controller.get_current_player_id()
player = players[player_id]

player has won
update
